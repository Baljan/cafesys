// Functions

// @source https://github.com/minamarkham/sassy-starter/blob/master/src/scss/utilities/_functions.scss

// Unit Conversion
// strip-unit($num)
//
// Strip units from values.
//
// $num       - Value to be stripped.
// @returns   - number
// @source    - http://hugogiraudel.com/2013/08/12/sass-functions

@function -w-strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// em()
//
//  Convert pixel values to ems.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

// WARNING STRIP-Units dont work - implement it
@function -w-em($target, $context: $font-size-base) {
  @if not unitless($target) {
    $target: -w-strip-unit($target);
  }
  @if not unitless($context) {
    $context: -w-strip-unit($context);
  }
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}
// rem()
//
// Convert pixel values to rems.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function -w-rem($target, $context: $font-size-base) {
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target / $context + 0rem;
}

// px()
//
// Convery em values to pixels.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function -w-px($target, $context: $font-size-base) {
  @if not unitless($target) {
    $pxval: strip-units($target);
  }
  @if not unitless($context) {
    $base: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target * $context + 0px;
}

// Map Functions
//
// Styleguide 11.2

// map-has-nested-keys($map)
//
// $map       - Parent map to get values from.
// @returns   - boolean
// @source    - http://www.sitepoint.com/better-solution-managing-z-index-sass/

@function -w-map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  } @return true;
}

// map-deep-get($map)
//
// $map       - Parent map to get values from.
// @returns   - `$map`
// @source    - http://www.sitepoint.com/better-solution-managing-z-index-sass/

@function -w-map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  } @return $map;
}

// z()
//
// @requires  - `@map-has-nested-keys` / `@map-deep-get` / `$zindex`
// @returns   - `map-deep-get($zindex, $indexes...)`
// @source    - http://www.sitepoint.com/extra-map-functions-sass/

@function -w-z($indexes...) {
  @if not -w-map-has-nested-keys($zindex, $indexes...) {
    @warn 'No index found for `#{inspect($indexes...)}` in $zindex map. Property omitted.';
  } @return -w-map-deep-get($zindex, $indexes...);
}

// bp()
//
// @requires  - `@map-has-nested-keys` / `@map-deep-get` / `$breakpoints`
// @returns   - `map-deep-get($breakpoints, $point...)`
// @source    - http://www.sitepoint.com/extra-map-functions-sass/

@function -w-bp($point...) {
  @if not -w-map-has-nested-keys($breakpoints, $point...) {
    @warn 'No breakpoint found for `#{inspect($point...)}` in $breakpoints map. Property omitted.';
  } @return -w-map-deep-get($breakpoints, $point...);
}

// Positive or negative integer exponents
// @source - https://css-tricks.com/snippets/sass/power-function/
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

//  MEDIA QUERIES.
//
// @returns - expression value of $breakpoints or $mq or custom
// @source - webman.pro 
//
// Parse expression
@function -w-parse-expression($expr) {
  $val: "";
  $width: "";
  $result: "";
  $is-custom: true;
  $operator: str-slice($expr, 1, 1);
  $equally: str-slice($expr, 2, 2);

  // Check if is $operator or $equally
  @if ($operator == ">" or $operator == "<" and ($equally != "=") ) {
    $val: str-slice($expr, 2);
  }@elseif ( ($operator == ">") or ($operator == "<") and ($equally == "=") ) {
    $val: str-slice($expr, 3);
  }@else {
    $val: str-slice($expr, 1);
  }

  // GET value
  @if map-has-key($breakpoints, $val) {
    $result: map-get($breakpoints, $val);
  }@else if map-has-key($mq, $val){
    $result: map-get($mq, $val);
    $is-custom: false;
  }@else {
    $result: $val;
  }

  // GET OPERATOR
  @if ($is-custom == true) {
    @if ( ($operator == ">") and ($equally != "=") ){
      $result: "(min-width: #{$result})";
    }@elseif ( ($operator == "<") and ($equally != "=") ){
      $result: "(max-width: #{$result - 1})";   
    }@elseif( ($operator == "<") and ($equally == "=") ) {
      $result: "(max-width: #{$result})";
    }@elseif( ($operator == ">") and ($equally == "=") ) {
      $result: "(min-width: #{$result})";
    }
  }@else {
    $result: $result;
  }

  @return $result;  
};
// 2. Add and to item
// @returns re
@function -w-concat($expressions) {
  $result: "";
  @each $expression in $expressions {
       @if (str-length($result) != 0) {
          $result: $result + " and ";
      }
      $result: $result + $expression;
  }
  @return $result;
}

//  Border
//
// @returns - value of $border
// @source - webman.pro 
//
// return border style
@function -border($color: $white, $size: $b-s-base, $style: "solid") {
  $border: $size + " " + $color + " " + $style;
  @return #{$border};
}